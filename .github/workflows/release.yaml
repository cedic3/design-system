name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      hasChangesets:
      published:
      main:

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Are we on main?
        id: is-main
        run: echo "main=$(if [[ '${GITHUB_REF##*/}' == 'main' ]]; then echo true; else echo false; fi)" >> $GITHUB_OUTPUT

      - name: Setup
        uses: ./.github/actions/setup-pnpm

      # Install changesets locally
      - name: Install dependencies
        run: pnpm install

      # Build custom changelog formatter
      - name: Build changelog formatter
        run: pnpm --filter design-system-changelog-github build

      # Set changeset base branch, only run on release/vX branches
      - name: Set changeset base branch
        if: steps.is-main.outputs.main == true
        run: echo "`jq '.baseBranch="${{ github.ref_name }}"' .changeset/config.json`" > .changeset/config.json

      - name: Log changeset config
        run: echo $(cat .changeset/config.json)

      # The changeset action will behave differently based on whether there are
      # new changesets on the main branch:
      #
      #  - new changesets: create a preview PR with the new version bumps and changelogs
      #  - no new changesets (the preview PR got merged into main): publish packages
      - name: Changeset magic
        id: changesets
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          title: 'chore(changesets): ðŸ¦‹ðŸ“¦ publish packages'
          commit: 'chore(changesets): publish packages'
          publish: pnpm changeset:publish
          version: pnpm changeset:version

      # Provide outputs for subsequent jobs
      - name: Set outputs
        run: |
          echo "hasChangesets=${{steps.changesets.outputs.hasChangesets}}" >> $GITHUB_OUTPUTS
          echo "published=${{steps.changesets.outputs.published}}" >> $GITHUB_OUTPUTS

  # Update the versions.json after the release workflow
  update-versions-on-release-pr:
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.outputs.main == true && needs.release.outputs.hasChangesets == true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: changeset-release/${{ github.ref_name }}

      # Update versions.json
      - name: Update versions.json
        uses: ./.github/actions/update-versions
        with:
          package_file_path: ./packages/demo/package.json
          versions_file_path: ./packages/demo/src/assets/versions.json

      # On main: update versions.json, commit and push
      - name: Push changes if on main
        run: |
          git add .
          git commit -m "chore(release): update versions.json"
          git push

  open-versions-pr-against-main:
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.outputs.main == false && needs.release.outputs.hasChangesets == false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: changeset-release/${{ github.ref_name }}

      # Update versions.json
      - name: Update versions.json
        uses: ./.github/actions/update-versions
        with:
          package_file_path: ./packages/demo/package.json
          versions_file_path: ./packages/demo/src/assets/versions.json

      # On release, create a changeset to update main docs
      - name: Create a changeset for the versions update
        env:
          $CHANGESET: ./.changeset/for-${{ github.ref_name }}-${{ github.workflow }}.md
        run: |
          echo ---                                                      > $CHANGESET
          echo "'@swisspost/design-system-demo': patch"                >> $CHANGESET
          echo ---                                                     >> $CHANGESET
          echo                                                         >> $CHANGESET
          echo "Updated the versions.json for ${{ github.ref_name }}." >> $CHANGESET
          echo                                                         >> $CHANGESET

      # On release: update versions.json, create a changeset, commit, create new branch and submit pr
      - name: Open PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git checkout -b "update-versions-json-for-${{github.ref_name}}-release-$(date +'%Y-%m-%d')"
          git add .
          git commit -m "chore(release): update versions.json"
          git push
          gh pr create --title "chore(release): udpate versions.json" --body "A release for version ${{ github.ref_name }} has been published. Please review the versions.json."
